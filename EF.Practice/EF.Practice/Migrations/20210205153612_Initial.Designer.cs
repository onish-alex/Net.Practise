// <auto-generated />
using System;
using EF.Practice.CodeFirst.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EF.Practice.CodeFirst.Migrations
{
    [DbContext(typeof(EmployeeDbContext))]
    [Migration("20210205153612_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("EF.Practice.CodeFirst.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DepartmentId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Department", "HumanResources");
                });

            modelBuilder.Entity("EF.Practice.CodeFirst.Entities.Employee", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LoginID")
                        .HasColumnType("int");

                    b.Property<int>("NationalIDNumber")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationLevel")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationNode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("BusinessEntityId");

                    b.HasIndex("LoginID")
                        .IsUnique();

                    b.HasIndex("NationalIDNumber")
                        .IsUnique();

                    b.HasIndex("PersonId");

                    b.ToTable("Employee", "HumanResources");
                });

            modelBuilder.Entity("EF.Practice.CodeFirst.Entities.EmployeeDepartmentShift", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("ShiftId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BusinessEntityId", "DepartmentId", "ShiftId", "StartDate");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ShiftId");

                    b.ToTable("EmployeeDepartmentShift", "HumanResources");
                });

            modelBuilder.Entity("EF.Practice.CodeFirst.Entities.EmployeePayHistory", b =>
                {
                    b.Property<int>("EmployeePayHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<int>("PayFrequency")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<DateTime>("RateChangeDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeePayHistoryId");

                    b.HasIndex("BusinessEntityId");

                    b.ToTable("EmployeePayHistory", "HumanResources");
                });

            modelBuilder.Entity("EF.Practice.CodeFirst.Entities.JobCandidate", b =>
                {
                    b.Property<int>("JobCandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Resume")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobCandidateId");

                    b.HasIndex("BusinessEntityId");

                    b.ToTable("JobCandidates", "HumanResources");
                });

            modelBuilder.Entity("EF.Practice.CodeFirst.Entities.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.ToTable("Person", "Person");
                });

            modelBuilder.Entity("EF.Practice.CodeFirst.Entities.SalesPerson", b =>
                {
                    b.Property<int>("SalesPersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<int>("SalesQuota")
                        .HasColumnType("int");

                    b.Property<int>("TerritoryId")
                        .HasColumnType("int");

                    b.HasKey("SalesPersonId");

                    b.HasIndex("BusinessEntityId");

                    b.ToTable("SalesPerson", "Sales");
                });

            modelBuilder.Entity("EF.Practice.CodeFirst.Entities.Shift", b =>
                {
                    b.Property<int>("ShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("ShiftId");

                    b.HasIndex("EndTime")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("StartTime")
                        .IsUnique();

                    b.ToTable("Shift", "HumanResources");
                });

            modelBuilder.Entity("EF.Practice.CodeFirst.Entities.Employee", b =>
                {
                    b.HasOne("EF.Practice.CodeFirst.Entities.Person", "Person")
                        .WithMany("Employees")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EF.Practice.CodeFirst.Entities.EmployeeDepartmentShift", b =>
                {
                    b.HasOne("EF.Practice.CodeFirst.Entities.Employee", "Employee")
                        .WithMany("EmployeeDepartmentShifts")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF.Practice.CodeFirst.Entities.Department", "Department")
                        .WithMany("EmployeeDepartmentShifts")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF.Practice.CodeFirst.Entities.Shift", "Shift")
                        .WithMany("EmployeeDepartmentShifts")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("EF.Practice.CodeFirst.Entities.EmployeePayHistory", b =>
                {
                    b.HasOne("EF.Practice.CodeFirst.Entities.Employee", "Employee")
                        .WithMany("History")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EF.Practice.CodeFirst.Entities.JobCandidate", b =>
                {
                    b.HasOne("EF.Practice.CodeFirst.Entities.Employee", "Employee")
                        .WithMany("JobCandidates")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EF.Practice.CodeFirst.Entities.SalesPerson", b =>
                {
                    b.HasOne("EF.Practice.CodeFirst.Entities.Employee", "Employee")
                        .WithMany("SalesPeople")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EF.Practice.CodeFirst.Entities.Department", b =>
                {
                    b.Navigation("EmployeeDepartmentShifts");
                });

            modelBuilder.Entity("EF.Practice.CodeFirst.Entities.Employee", b =>
                {
                    b.Navigation("EmployeeDepartmentShifts");

                    b.Navigation("History");

                    b.Navigation("JobCandidates");

                    b.Navigation("SalesPeople");
                });

            modelBuilder.Entity("EF.Practice.CodeFirst.Entities.Person", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EF.Practice.CodeFirst.Entities.Shift", b =>
                {
                    b.Navigation("EmployeeDepartmentShifts");
                });
#pragma warning restore 612, 618
        }
    }
}
